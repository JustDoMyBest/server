# Rewrite
URL访问跳转，支持开发设计
    页面跳转、兼容性支持、展示效果等
SEO优化
维护
    后台维护、流量转发等
安全 # 伪静态伪装
---------
rewrite ^(.*)$ /pages/maintain.html break;
.       匹配除换行符以外的任意字符
?       重复0次或1次
+       重复1次或更多次
*       最少链接数，那个机器连接数少就分发
\d      匹配数字
^       匹配字符串的开始
$       匹配字符串的结束
{n}     重复n次
{n,}    重复n次或更多次
[c]     匹配单个字符c
[a-z]   匹配a-z小写字母的任意一个
\       转义字符
()      用于匹配括号之间的内容，通过$1，$2调用
if ($http_user_agent ~ MSIE) {
    rewrite ~(.*)$ /msie/$1 break;
}
pcretest
---------
last       停止rewrite检测 # 会新建一个请求，继续匹配location规则
break      停止rewrite检测
redirect   返回302临时重定向，地址栏会显示跳转后的地址
permanent  返回301临时重定向，地址栏会显示跳转后的地址
---------
location /test/ {
    default_type application/json;
    return 200 '{"status":"success"}';
}
---------
curl -vL
---------
location / {
    if ($http_user_agent ~* Chrome) {
        #rewrite ^/nginx http://coding.imooc.com/class121.html break;
        rewrite ^/nginx http://coding.imooc.com/class121.html redirect;
    }
    if (!-f $request_filelname) {
        rewrite ^/(.*) http://www.baidu.com/$1 redirect;
    }
    index index.html index.htm
}
---------
server rewrite -> location -> location rewrite
---------
server {
    listen 80;
    server_name www.nginx.org nginx.org;
    if ($http_host = nginx.org) {
        rewrite (.*) http://www.nginx.org$1;
    }
}
server {
    listen 80;
    server_name nginx.org;
    rewrite ^ http://www.nginx.org$request_uri?;
}
server {
    listen 80;
    server_name www.nginx.org;
}

# secure_link_module
制定并允许检查请求的连接的真实性以及保护资源免遭未经授权的访问
限制链接生效周期
---------
secure_link expression;
secure_link_md5 expression;
location / {
    secure_link $arg_md5,$arg_expires;
    secure_link_md5 "$secure_link_expires$uri imooc";

    if ($secure_link = "") {
        return 403;
    }

    if ($secure_link = "0") {
        return 410;
    }
}

# geoip_module模块
基于IP地址匹配MaxMind GeoIP 二进制文件，读取IP所在地域信息。
yum install nginx-module-geoip
区别国内外作HTTP访问规则
区别国内城市地域作HTTP访问规则
load_module "ngx_http_geoip_module.so";
load_module "ngx_stream_geoip_module.so";
http
    geoip_country /etc/nginx/geoip/GeoIP.dat;
    geoip_city /etc/nginx/geoip/GeoLiteCity.dat;
    location / {
        if ($geoip_country_code != CN){
            return 403;
        }
        root /usr/share/nginx/html;
        index index.html index.htm;
    }
    location /myip {
        default_type text/plain;
        return 200 "$remote_addr $geoip_country_name $geoip_country_code $geoip_city";
    }

# HTTPS
1. 生成key秘钥
2. 生成证书签名请求文件（csr文件）
--------- 提交给CA认证机构
3. 生成证书签名文件（CA文件） # 自签名
---------
mkdir ssl_key
cd ssl_key
openssl genrsa -idea -out jesonc.key 1024
openssl req -new -key jesonc.key -out jesonc.csr
---------
openssl x509 -req -days 3650 -in jesonc.csr -signkey jesonc.key -out jesonc.crt # 默认1个月
---------
server
{
    listen 443;
    server_name 116.62.103.228 jeson.t.imooc.io;
    keepalive_timeout 100;
    ssl on | off;
    ssl_session_cache   shared:SSL:10m; # 大约存储8000到10000个session会话
    ssl_session_timeout 10m;
    ssl_certificate /etc/nginx/ssl_key/jesonc.crt;
    ssl_certificate_key /etc/nginx/ssl_key/jesonc.key;

    index index.html index.htm;
    location / {
        root /root/app/code;
    }
}
---------
openssl x509 -noout -text -in ./jesonc.crt # 查看当前的使用的自签证书的加密签名的算法类型
---------
## 直接生成自签证书
openssl req -days 36500 -x509 -sha256 -nodes -newkey rsa:2048 -keyout jesonc.key -out jesonc_apple.crt
## 去掉密码保护码
openssl rsa -in ./jesoncold.key -out ./jesoncou_nopas.key
---------

= Lua =
简洁、轻量、可扩展
## 安装
yum install lua
== 基本语法 ==
=== 注释 ===
--行注释
--[[
    块注释
--]]
---------
=== 变量 ===
a = 'alo\n123"'
a = "alo\n123\""
a = 'alo\n123"'
a = [[alo
123"]]
false: nil false
true: 0 ''
local a
---------
=== while ===
sum = 0
num = 1
while num <= 100 do
    sum = sum + num
    num = num + 1
end
print("sum =",sum)
---------
=== for ===
sum = 0
for i = 1 100 do
    sum = sum + i
end
---------
=== if else ===
if age == 40 and sex == "Male" then
    print("大于40男人")
elseif age > 60 and sex ~= "Female" then
    print("非女人而且大于60")
else
    local age = io.read()
    print("Your age is"..age)
end
== Nginx+Lua环境 ==
1. LuaJIT
2. nginx_devel_kit和lua-nginx-module
3. 重新编译NGINX
---------
== Nginx调用lua模块指令 ==
| set_by_lua          | 设置nginx变量，可以实现复杂的复杂的赋值逻辑 |
| set_by_lua_file     |                                             |
---------
| access_by_lua       | 请求访问阶段处理，用于访问控制              |
| access_by_lua_file  |                                             |
---------
| content_by_lua      | 内容处理器，接受请求处理并输出响应          |
| content_by_lua_file |                                             |
== Nginx Lua API ==
| ngx.var              | nginx变量                             |
| ngx.req.get_headers  | 获取请求头                            |
| ngx.req.get_uri_args | 获取url请求参数                       |
| ngx.redirect         | 重定向                                |
| ngx.print            | 输出响应内容体                        |
| ngx.say              | 通ngx.print，但是会最后输出一个换行符 |
| ngx.header           | 输出响应头                            |
| ...                  |                                       |

= 灰度发布 =
1. 用户的信息cookie等信息区别
2. 根据用户的ip地址
