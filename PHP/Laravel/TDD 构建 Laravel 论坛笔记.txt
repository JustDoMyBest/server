composer config -g repo.packagist composer https://packagist.phpcomposer.com
SET HTTP_PROXY="http://127.0.0.1:8080"

composer create-project laravel/laravel forum --prefer-dist "5.4.*"

建立Thread模型、迁移文件与控制器：
php artisan make:model Thread -mr


建立forum数据库，并运行迁移：
$ php artisan migrate

建立Reply模型、迁移文件与控制器：
php artisan make:model Reply -mr

再次运行迁移：
php artisan migrate

database\factories\ModelFactory.php

php artisan tinker
factory('App\Reply',50)->create();

顺手生成一下 Laravel 自带的注册登录功能：
php artisan make:auth

php artisan make:test ReplyTest --unit
php artisan make:test ThreadTest --unit

phpunit --filter a_thread_has_a_creator

php artisan make:test ParticipateInForumTest

定位错误
if(app()->environment() === 'testing') throw $exception;  // 此处加上一行

 ./vendor/bin/phpunit --filter an_authenticated_user_may_participate_in_forum_threads

php artisan make:test CreateThreadsTest

关于create()，make()，raw()三种方法的比较：
    create()方法得到一个模型实例，并保存到数据库中；
    make()方法得到一个模型实例（不保存）；
    raw()方法是得到一个模型实例转化后的数组。

Route::resource('threads','ThreadsController');
以上代码等同于：
Route::get('/threads', 'threadsController@index')->name('threads.index');
Route::get('/threads/create', 'threadsController@create')->name('threads.create');
Route::get('/threads/{thread}', 'threadsController@show')->name('threads.show');
Route::post('/threads', 'threadsController@store')->name('threads.store');
Route::get('/threads/{thread}/edit', 'threadsController@edit')->name('threads.edit');
Route::patch('/threads/{thread}', 'threadsController@update')->name('threads.update');
Route::delete('/threads/{thread}', 'threadsController@destroy')->name('threads.destroy');

php artisan make:model Channel -m

dd()

 隐性路由模型绑定 {channel}路由片段默认对应的是id字段，而我们需要对应的是slug字段。所以我们需要重写getRouteKeyName()方法

composer require barryvdh/laravel-debugbar:~2.4

forum\app\Providers\AppServiceProvider.php
public function register()
{
    if($this->app->isLocal()){
        $this->app->register(\Barryvdh\Debugbar\ServiceProvider::class);
    }
}

$thread->replies()跟$thread->replies的区别：$thread->replies()返回的是一个hasMany对象，而$thread->replies返回的是一个Collection集合。


composer require barryvdh/laravel-debugbar:~2.4

$threads->toSql()

php artisan make:controller FavoritesController

php artisan make:migration create_favorites_table --create=favorites

php artisan make:model Favorite

php artisan migrate

php artisan vendor:publish

php artisan make:policy ThreadPolicy --model=Thread

php artisan make:model Activity -m

php artisan make:policy ReplyPolicy

序列化 访问器.

npm install moment --save

回滚最近一次迁移
$ php artisan migrate:rollback
$ php artisan migrate

我们将使用 Laravel 的消息通知系统 来进行消息通知。我们需要先创建notifications数据表，Laravel 自带了生成迁移表的命令，执行以下命令即可：
php artisan notifications:table
php artisan migrate

生成通知类
Laravel 中一条通知就是一个类（通常存在 app/Notifications 文件夹里）。我们运行以下命令创建ThreadWasUpdated通知类：
php artisan make:notification ThreadWasUpdated

php artisan make:test NotificationsTest

php artisan make:controller UserNotificationsController

为事件和监听器创建文件：
php artisan event:generate

back()->with()

resolve(Spam::class)

npm list --depth=0

创建表单请求类：
php artisan make:request CreatePostRequest

npm install at.js --save

npm install jquery.caret --save

php artisan make:controller Api/UsersController
php artisan make:controller "Api\UserAvatarController"

php artisan storage:link







